<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- usermapperInterface 와 namespace를 맞춰준다 --> 
<!--  조건이 IF에 의해 변경될 것 같다면 WHERE을 태그로 달아라. 필요없는 AND를 알아서 생략해준다. pw 하나만 와도 오류 안남 -->
<mapper namespace="com.gdu.myapp.mapper.BbsMapper">

<!-- BbsDto 의 구조를 이용해 BbsMap 을 만들어서 resultType 대신 resultMap 으로 사용 -->
<!-- select에 있는 칼럼들이 다 여기에 있어야 한다. 원레 마이바티스가 해주지만 지금 UserDto를 못읽으니까 이렇게 하는거! 아니면 전설의 Dto 쓰던지...Dto 하나에 필드 100개 -->
<resultMap type="BbsDto" id="BbsMap">
  <id     property="bbsNo"    column="BBS_NO" />
  <result property="contents" column="CONTENTS"/>
  <result property="createDt" column="CREATE_DT"/>
  <result property="state"    column="STATE" />
  <result property="depth"    column="DEPTH" />
  <result property="groupNo"  column="GROUP_NO" />
  <result property="groupOrder" column="GROUP_ORDER"/>
  <association property="user" javaType="UserDto">
    <id     property="userNo"  column="USER_NO"/>
    <result property="email"   column="EMAIL"/>
  </association>
</resultMap>

<!-- 원글 삽입 -->
<insert id="insertBbs"
        parameterType="BbsDto">

 INSERT INTO BBS_T (
     BBS_NO
   , CONTENTS
   , USER_NO
   , CREATE_DT
   , STATE
   , DEPTH
   , GROUP_NO
   , GROUP_ORDER
 ) VALUES (
     BBS_SEQ.NEXTVAL
   , #{contents}
   , #{user.userNo}
   , CURRENT_DATE
   , 1
   , 0
   , BBS_SEQ.CURRVAL
   , 0
 )

</insert>

 <!-- 전체 BBS 게시글 수 -->
 <select id="getBbsCount"
       resultType="int">
  SELECT COUNT(*)
    FROM BBS_T
 </select>
 
 <!-- BBS 게시글 목록  BbsMap을 쓰니까 resultMap="BbsMap" 로 바꿔준다-->
 <!--  resultMap 안에 resultMap 넣는 방법도 있습니다. 이것도 쓸 기회있을 것임!  -->
 <select id="getBbsList"
         parameterType="Map"
         resultMap="BbsMap">
       
   SELECT BBS_NO, CONTENTS, USER_NO, EMAIL, CREATE_DT, STATE, DEPTH, GROUP_NO, GROUP_ORDER
     FROM (SELECT ROW_NUMBER() OVER(ORDER BY GROUP_NO DESC, GROUP_ORDER ASC) AS RN, B.BBS_NO, B.CONTENTS, B.USER_NO, U.EMAIL, B.CREATE_DT, B.STATE, B.DEPTH, B.GROUP_NO, B.GROUP_ORDER
             FROM USER_T U INNER JOIN BBS_T B 
             ON U.USER_NO = B.USER_NO)
    WHERE RN BETWEEN #{begin} AND #{end}
    <!-- Dto에 있는 객체 어떻게 저장하더라...? resultMap!! 기억합시당 -->        
   
         
 </select>
 
 <!--  답글 삽입 전 기존 답글들의 Group_Order 업데이트 (UPDATE-INSERT 트랜잭션)-->
 <update id="uadateGroupOrder"
         parameterType="BbsDto">  <!-- BbsDto는 원글을 의미함 -->
   UPDATE BBS_T
      SET GROUP_ORDER = GROUP_ORDER + 1
    WHERE GROUP_NO = #{groupNo}
      AND GROUP_ORDER > #{groupOrder}      
 </update>
 <insert id="insertReply"
         parameterType="BbsDto">   <!-- BbsDto 는 답글을 의미함 -->
  INSERT INTO BBS_T (
     BBS_NO
   , CONTENTS
   , USER_NO
   , CREATE_DT
   , STATE
   , DEPTH
   , GROUP_NO
   , GROUP_ORDER
 ) VALUES (
     BBS_SEQ.NEXTVAL
   , #{contents}
   , #{user.userNo}
   , CURRENT_DATE
   , 1
   , #{depth}
   , #{groupNo}
   , #{groupOrder} 
 )       
         
 </insert>
 
 <!-- BBS 게시글 삭제(실제로는 state = 0 으로 업데이트) -->
   <update id="removeBbs">
    UPDATE BBS_T
       SET STATE = 0
     WHERE BBS_NO = #{bbsNo}
  </update>
  
  <!-- 검색은 목록보기 처리이다. 검색된 데이터의 게시글수, 게시글 목록이 필요함. -->
  <!-- 검색 결과 개수. JOIN이 필요하다.(EMAIL이 BBS_T에 없다) -->
  <select id="getSearchCount"
          parameterType="Map"
          resultType="int">
  SELECT COUNT(*)
    FROM USER_T U INNER JOIN BBS_T B
      ON U.USER_NO = B.USER_NO
   WHERE ${column} LIKE '%' || #{query} || '%'
  </select>
  
  <!-- 검색 결과 목록 -->
  <!-- (서브쿼리 + where) 절 처리 (서브쿼리 FROM에 걸든 WHERE 걸든 상관 없지만 FROM에 거는게 보기 좋아서 계속 그렇게 합니당 -->
  <!-- 변수 4가지가 들어간다! 칼럼, 쿼리, 비긴, 엔드 -->
 <select id="getSearchList"
          parameterType="Map"
          resultMap="BbsMap">          
    SELECT BBS_NO, CONTENTS, USER_NO, EMAIL, CREATE_DT, STATE, DEPTH, GROUP_NO, GROUP_ORDER
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY GROUP_NO DESC, GROUP_ORDER ASC) AS RN, B.BBS_NO, B.CONTENTS, U.USER_NO, U.EMAIL, B.CREATE_DT, B.STATE, B.DEPTH, B.GROUP_NO, B.GROUP_ORDER
              FROM USER_T U INNER JOIN BBS_T B
                ON U.USER_NO = B.USER_NO
             WHERE ${column} LIKE CONCAT(CONCAT('%', #{query}), '%'))
     WHERE RN BETWEEN #{begin} AND #{end}
 </select>
  
</mapper>